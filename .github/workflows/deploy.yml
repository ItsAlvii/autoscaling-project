name: Deploy to EC2 (AutoScaling)

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-1
      ASG_NAME: project-autoscale-asg
      LAUNCH_TEMPLATE_NAME: project-autoscale-template
      GOLDEN_INSTANCE_ID: i-0485e0a0de93b1909  # instance with latest code
      DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/project-name
      VERSION: v${{ github.run_number }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          docker build -t $DOCKER_IMAGE:$VERSION .
          docker push $DOCKER_IMAGE:$VERSION

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create new AMI from golden instance
        id: create_ami
        run: |
          AMI_NAME="project-autoscale-${VERSION}-$(date +%Y%m%d%H%M%S)"
          AMI_ID=$(aws ec2 create-image \
            --instance-id $GOLDEN_INSTANCE_ID \
            --name "$AMI_NAME" \
            --no-reboot \
            --query "ImageId" \
            --output text)
          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV
          echo "Waiting for AMI to become available..."
          aws ec2 wait image-available --image-ids $AMI_ID
          echo "AMI $AMI_ID is now available."

      - name: Create new Launch Template version with new AMI
        run: |
          LATEST_VERSION=$(aws ec2 create-launch-template-version \
            --launch-template-name $LAUNCH_TEMPLATE_NAME \
            --source-version 1 \
            --version-description "GitHub Actions deploy $VERSION" \
            --launch-template-data "{\"ImageId\":\"${{ env.AMI_ID }}\"}" \
            --query 'LaunchTemplateVersion.VersionNumber' \
            --output text)
          echo "New launch template version $LATEST_VERSION created with AMI ${{ env.AMI_ID }}"

      - name: Update Auto Scaling Group to use latest Launch Template version
        run: |
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name $ASG_NAME \
            --launch-template "LaunchTemplateName=$LAUNCH_TEMPLATE_NAME,Version=$LATEST_VERSION"

      - name: Start rolling update via Instance Refresh
        run: |
          aws autoscaling start-instance-refresh \
            --auto-scaling-group-name $ASG_NAME \
            --preferences MinHealthyPercentage=50

