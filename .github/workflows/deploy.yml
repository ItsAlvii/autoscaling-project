name: Deploy to EC2 (AutoScaling + Instance1)

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-1
      ASG_NAME: project-autoscale-asg
      EC2_TAG_KEY: name
      EC2_TAG_VALUE: project-autoscale
      DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/autoscaing-project:latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image (no cache)
        run: |
          docker system prune -af
          docker build --no-cache -t $DOCKER_IMAGE .
          docker push $DOCKER_IMAGE

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-ec2-deploy-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Get EC2 instance IDs (Instance1 + ASG instances)
        id: get-ec2
        run: |
          INSTANCE_IDS=$(aws ec2 describe-instances \
            --filters "Name=tag:${EC2_TAG_KEY},Values=${EC2_TAG_VALUE}" "Name=instance-state-name,Values=running" \
            --query "Reservations[*].Instances[*].InstanceId" \
            --output text)
          echo "INSTANCE_IDS=$INSTANCE_IDS" >> $GITHUB_ENV

      - name: Redeploy Docker container on EC2 instances
        run: |
          for id in $INSTANCE_IDS; do
            echo "Deploying to EC2 instance: $id"
            aws ssm send-command \
              --instance-ids "$id" \
              --document-name "AWS-RunShellScript" \
              --comment "Redeploy latest Docker container" \
              --parameters 'commands=[
                "sudo docker stop app || true",
                "sudo docker rm app || true",
                "sudo docker system prune -af || true",
                "sudo docker pull '${DOCKER_IMAGE}'",
                "sudo docker run -d --name app -p 80:80 '${DOCKER_IMAGE}'"
              ]' \
              --region $AWS_REGION > /dev/null
          done

